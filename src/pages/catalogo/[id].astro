---
// 1. Imports y rutas
import MainLayout from '../../layouts/MainLayout.astro';
import { Image } from 'astro:assets';
import { Icon } from 'astro-icon/components';

export async function getStaticPaths() {
  const res = await fetch('http://localhost:4000/api/services');
  if (!res.ok) throw new Error('Error al cargar los servicios');
  const services = await res.json();
  return services.map(s => ({ params: { id: s.id.toString() } }));
}

const { id } = Astro.params;

// 2. Fetch del servicio
const res = await fetch(`http://localhost:4000/api/services/${id}`);
if (!res.ok) throw new Error(`Servicio ${id} no encontrado`);
const service = await res.json();

// 3. Prepara imágenes
const images = service.gallery.map(img => ({
  src: img.url,
  alt: service.title,
  format: 'auto',
  width: 800,
  height: 600,
  widths: [400, 800],
}));

// 4. Lee índice inicial
const initialImageIndex = parseInt(Astro.url.searchParams.get('image') || '0');
---

<MainLayout title={service.title}>
  <div class="container mx-auto px-5 sm:px-10 md:px-20 py-8">
    <nav class="dui breadcrumbs text-sm">
      <ul>
        <li><a href="/" class="text-primary-500">Inicio</a></li>
        <li><a href="/catalogo" class="text-primary-500">Catálogo</a></li>
        <li class="font-medium text-secondary-500">{service.title}</li>
      </ul>
    </nav>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
    <!-- Galería de imágenes -->
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      {images.length > 0 ? (
        <div class="relative">
          <!-- Imagen principal (clickeable para lightbox) -->
          <div class="aspect-video bg-gray-100 cursor-zoom-in">
            <img 
              src={images[initialImageIndex].src} 
              alt={`${service.title} - Imagen principal`}
              id="mainImage"
              class="w-full h-full object-cover object-[center_30%]"
              data-lightbox="true"
            />
          </div>
      
      <!-- Controles de navegación para pantallas grandes -->
      {images.length > 1 && (
        <>
          <button 
            id="prevImage" 
            class="absolute left-4 top-1/2 -translate-y-1/2 bg-white/70 hover:bg-white text-gray-800 p-2 rounded-full shadow transition cursor-pointer"
            aria-label="Imagen anterior"
          >
            <Icon name="mdi:chevron-left" class="w-6 h-6" />
          </button>
          <button 
            id="nextImage" 
            class="absolute right-4 top-1/2 -translate-y-1/2 bg-white/70 hover:bg-white text-gray-800 p-2 rounded-full shadow transition cursor-pointer"
            aria-label="Imagen siguiente"
          >
            <Icon name="mdi:chevron-right" class="w-6 h-6" />
          </button>
        </>
      )}
            
            <!-- Contador de imágenes -->
            {images.length > 1 && (
              <div class="absolute bottom-4 right-4 bg-black/60 text-white px-3 py-1 text-sm rounded-full">
                <span id="currentIndex">{initialImageIndex + 1}</span>/<span>{images.length}</span>
              </div>
            )}
          </div>
          
          <!-- Miniaturas -->
          {images.length > 1 && (
            <div class="gallery-thumbs mt-4 px-4 pb-4 flex gap-2 overflow-x-auto snap-x">
              {images.map((img, idx) => (
                <button 
                  class={`thumbnail-btn min-w-[80px] h-16 rounded overflow-hidden border-2 transition ${idx === initialImageIndex ? 'border-primary-500' : 'border-transparent'}`}
                  data-index={idx}
                  aria-label={`Ver imagen ${idx + 1}`}
                >
                  <img 
                    src={img.src} 
                    alt={`${service.title} - Miniatura ${idx + 1}`} 
                    class="w-full h-full object-cover"
                  />
                </button>
              ))}
            </div>
          )}
        ) : (
          <div class="aspect-video bg-gray-100 flex items-center justify-center">
            <p class="text-gray-500">No hay imágenes disponibles</p>
          </div>
        )}
      </div>

      <!-- Información del servicio -->
      <div>
        <h1 class="text-4xl md:text-5xl font-bold text-secondary-500 mb-4">{service.title}</h1>
        
        <div class="prose prose-lg max-w-none mb-8">
          {service.description}
        </div>
        
        {service.features && service.features.length > 0 && (
          <div class="mb-8">
            <h2 class="text-xl font-semibold mb-4">Características</h2>
            <ul class="space-y-2">
              {service.features.map(feature => (
                <li class="flex items-start">
                  <Icon name="mdi:check-circle" class="w-5 h-5 text-green-500 mt-1 mr-2" />
                  <span>{feature}</span>
                </li>
              ))}
            </ul>
          </div>
        )}
        
        <div class="flex flex-wrap gap-4">
          <a 
            href={`/contact?service=${service.id}`} 
            class="bg-primary-500 hover:bg-orange-700 text-white px-6 py-2 rounded-lg shadow transition flex items-center"
          >
            <Icon name="simple-icons:whatsapp" class="w-5 h-5 mr-2" />
            Solicitar información
          </a>
          
          {service.brochureUrl && (
            <a 
              href={service.brochureUrl}
              class="bg-white hover:bg-gray-50 text-gray-800 border border-gray-300 px-6 py-2 rounded-lg shadow transition flex items-center"
              download
            >
              <Icon name="mdi:file-download-outline" class="w-5 h-5 mr-2" />
              Descargar folleto
            </a>
          )}
        </div>
      </div>
    </div>

    <!-- Videos relacionados -->
    {service.videos && service.videos.length > 0 && (
      <div class="mt-12">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">Videos relacionados</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {service.videos.map(video => (
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
              <div class="aspect-video">
                <iframe 
                  src={`https://www.youtube.com/embed/${video.youtubeId}`} 
                  title={video.title || `Video de ${service.title}`}
                  class="w-full h-full" 
                  allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                  allowfullscreen
                ></iframe>
              </div>
              {video.title && (
                <div class="p-4">
                  <h3 class="font-medium">{video.title}</h3>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    )}
  </div>
</MainLayout>

<!-- Lightbox Modal -->
<div 
  id="lightboxModal" 
  class="fixed inset-0 bg-black/90 z-50 hidden flex-col items-center justify-center p-4"
>
  <div class="absolute top-4 right-4 z-10">
    <button 
      id="closeLightbox" 
      class="bg-white/20 hover:bg-white/40 rounded-full p-2 text-white transition-colors cursor-pointer"
      aria-label="Cerrar vista ampliada"
    >
      <Icon name="mdi:close" class="w-8 h-8" />
    </button>
  </div>
  
  <div class="relative w-full max-w-6xl max-h-[85vh] flex items-center justify-center">
    <!-- Controles de navegación -->
    <button 
      id="lightboxPrev" 
      class="absolute left-2 top-1/2 -translate-y-1/2 bg-white/20 hover:bg-white/40 text-white p-2 rounded-full shadow transition cursor-pointer"
      aria-label="Imagen anterior"
    >
      <Icon name="mdi:chevron-left" class="w-8 h-8" />
    </button>
    
    <img 
      id="lightboxImage" 
      class="max-w-full max-h-[85vh] object-contain" 
      src="" 
      alt="Imagen ampliada"
    />
    
    <button 
      id="lightboxNext" 
      class="absolute right-2 top-1/2 -translate-y-1/2 bg-white/20 hover:bg-white/40 text-white p-2 rounded-full shadow transition cursor-pointer"
      aria-label="Imagen siguiente"
    >
      <Icon name="mdi:chevron-right" class="w-8 h-8" />
    </button>
  </div>
  
  <!-- Contador de imágenes -->
  <div class="text-white mt-4 text-lg font-medium">
    <span id="lightboxCurrentIndex">1</span>/<span id="lightboxTotalImages">1</span>
  </div>
</div>

<script>
  // Inicializar la galería de imágenes
  document.addEventListener('DOMContentLoaded', () => {
    const thumbnails = document.querySelectorAll('.thumbnail-btn');
    const mainImage = document.getElementById('mainImage');
    const currentIndexEl = document.getElementById('currentIndex');
    const prevButton = document.getElementById('prevImage');
    const nextButton = document.getElementById('nextImage');
    
    // Elementos del lightbox
    const lightboxModal = document.getElementById('lightboxModal');
    const lightboxImage = document.getElementById('lightboxImage');
    const lightboxPrev = document.getElementById('lightboxPrev');
    const lightboxNext = document.getElementById('lightboxNext');
    const closeLightbox = document.getElementById('closeLightbox');
    const lightboxCurrentIndex = document.getElementById('lightboxCurrentIndex');
    const lightboxTotalImages = document.getElementById('lightboxTotalImages');
    
    if (!mainImage || thumbnails.length === 0) return;
    
    let currentIndex = parseInt(thumbnails[0].getAttribute('data-index') || '0');
    const maxIndex = thumbnails.length - 1;
    
    // Actualizar el total de imágenes en el lightbox
    if (lightboxTotalImages) {
      lightboxTotalImages.textContent = (thumbnails.length).toString();
    }
    
    // Función para actualizar la imagen principal
    function updateMainImage(index, updateLightbox = false) {
      if (index < 0) index = maxIndex;
      if (index > maxIndex) index = 0;
      
      currentIndex = index;
      
      // Actualizar imagen principal
      const selectedThumb = document.querySelector(`.thumbnail-btn[data-index="${index}"]`);
      if (!selectedThumb) return;
      
      const imgSrc = selectedThumb.querySelector('img').src;
      mainImage.src = imgSrc;
      
      // Actualizar estado de las miniaturas
      thumbnails.forEach(thumb => {
        const thumbIndex = parseInt(thumb.getAttribute('data-index') || '0');
        if (thumbIndex === index) {
          thumb.classList.add('border-primary-500');
          thumb.classList.remove('border-transparent');
          thumb.scrollIntoView({ behavior: 'smooth', inline: 'center', block: 'nearest' });
        } else {
          thumb.classList.remove('border-primary-500');
          thumb.classList.add('border-transparent');
        }
      });
      
      // Actualizar contador
      if (currentIndexEl) {
        currentIndexEl.textContent = (index + 1).toString();
      }
      
      // Actualizar lightbox si está activo
      if (updateLightbox && lightboxImage && lightboxModal.classList.contains('flex')) {
        lightboxImage.src = imgSrc;
        if (lightboxCurrentIndex) {
          lightboxCurrentIndex.textContent = (index + 1).toString();
        }
      }
      
      // Actualizar URL sin recargar la página
      const url = new URL(window.location.href);
      url.searchParams.set('image', index.toString());
      window.history.replaceState({}, '', url);
    }
    
    // Abrir el lightbox
    function openLightbox() {
      if (!lightboxModal || !lightboxImage) return;
      
      // Establecer la imagen actual en el lightbox
      lightboxImage.src = mainImage.src;
      
      // Actualizar contador
      if (lightboxCurrentIndex) {
        lightboxCurrentIndex.textContent = (currentIndex + 1).toString();
      }
      
      // Mostrar el modal
      lightboxModal.classList.remove('hidden');
      lightboxModal.classList.add('flex');
      document.body.style.overflow = 'hidden'; // Prevenir scroll
    }
    
    // Cerrar el lightbox
    function closeLightboxModal() {
      if (!lightboxModal) return;
      
      lightboxModal.classList.add('hidden');
      lightboxModal.classList.remove('flex');
      document.body.style.overflow = ''; // Restaurar scroll
    }
    
    // Event listener para abrir el lightbox al hacer clic en la imagen principal
    if (mainImage) {
      mainImage.addEventListener('click', openLightbox);
    }
    
    // Event listener para cerrar el lightbox
    if (closeLightbox) {
      closeLightbox.addEventListener('click', closeLightboxModal);
    }
    
    // Cerrar lightbox con Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && lightboxModal && !lightboxModal.classList.contains('hidden')) {
        closeLightboxModal();
      }
    });
    
    // Navegación en el lightbox
    if (lightboxPrev) {
      lightboxPrev.addEventListener('click', () => {
        updateMainImage(currentIndex - 1, true);
      });
    }
    
    if (lightboxNext) {
      lightboxNext.addEventListener('click', () => {
        updateMainImage(currentIndex + 1, true);
      });
    }
    
    // Event listeners para los botones de navegación de la galería
    if (prevButton) {
      prevButton.addEventListener('click', () => {
        updateMainImage(currentIndex - 1);
      });
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', () => {
        updateMainImage(currentIndex + 1);
      });
    }
    
    // Event listeners para las miniaturas
    thumbnails.forEach(thumbnail => {
      thumbnail.addEventListener('click', () => {
        const index = parseInt(thumbnail.getAttribute('data-index') || '0');
        updateMainImage(index);
      });
    });
    
    // Navegación con teclado
    document.addEventListener('keydown', (e) => {
      if (lightboxModal && !lightboxModal.classList.contains('hidden')) {
        // Navegación en lightbox
        if (e.key === 'ArrowLeft') {
          updateMainImage(currentIndex - 1, true);
        } else if (e.key === 'ArrowRight') {
          updateMainImage(currentIndex + 1, true);
        }
      } else {
        // Navegación normal
        if (e.key === 'ArrowLeft') {
          updateMainImage(currentIndex - 1);
        } else if (e.key === 'ArrowRight') {
          updateMainImage(currentIndex + 1);
        }
      }
    });
    
    // Cerrar lightbox al hacer clic fuera de la imagen
    lightboxModal?.addEventListener('click', (e) => {
      if (e.target === lightboxModal) {
        closeLightboxModal();
      }
    });
  });
</script>

<style>
  /* Estilos para la galería */
  .gallery-thumbs {
    scrollbar-width: thin;
    scrollbar-color: rgba(156, 163, 175, 0.5) transparent;
  }
  
  .gallery-thumbs::-webkit-scrollbar {
    height: 6px;
  }
  
  .gallery-thumbs::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .gallery-thumbs::-webkit-scrollbar-thumb {
    background-color: rgba(156, 163, 175, 0.5);
    border-radius: 3px;
  }
  
  .thumbnail-btn {
    transition: all 0.2s ease;
  }
  
  .thumbnail-btn:hover {
    transform: translateY(-2px);
  }
  
  /* Animación para el cambio de imágenes */
  #mainImage {
    transition: opacity 0.3s ease;
  }
  
  /* Estilos para el lightbox */
  #lightboxModal {
    transition: opacity 0.3s ease;
  }
  
  #lightboxImage {
    transition: transform 0.3s ease;
  }
  
  .cursor-zoom-in {
    cursor: zoom-in;
  }
  
  /* Animación para las transiciones del lightbox */
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  #lightboxModal.flex {
    animation: fadeIn 0.3s ease forwards;
  }
  
  #lightboxImage {
    animation: scaleIn 0.3s ease forwards;
  }
  
  @keyframes scaleIn {
    from { transform: scale(0.9); opacity: 0; }
    to { transform: scale(1); opacity: 1; }
  }
</style>