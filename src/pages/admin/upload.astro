---
import "@styles/global.css";
import MainLayout from "@layouts/MainLayout.astro";
import Button from "@components/shared/Button.astro";
import Image from "astro/components/Image.astro";
import RanaUpload from "@images/rana_upload.png";
---

<MainLayout title="Subir Medios">
  <section class="grid min-h-[100vh] place-items-center">
    <div
      class="w-full max-w-lg rounded-xl bg-white p-3 shadow-lg md:p-5 lg:p-10"
    >
      <h3
        class="from-primary-500 mt-2 bg-gradient-to-r to-[#FF7E00] bg-clip-text text-center text-3xl font-bold text-transparent"
      >
        Subir archivos a <span class="font-okidoki text-5xl font-normal"
          >oKiDoki</span
        >
      </h3>
      <div class="mb-4 flex justify-center">
        <Image
          src={RanaUpload}
          alt="OkiDoki Logo"
          loading="eager"
          class="w-1/2"
        />
      </div>

      <form id="upload-form" class="mt-6 grid gap-4">
        <div
          id="drop-zone"
          class="hover:border-primary-500 relative rounded-3xl border-2 border-dashed border-gray-300 p-8 text-center transition-all duration-300"
        >
          <input
            type="file"
            id="file-input"
            name="files"
            accept="image/*,video/*"
            multiple
            required
            class="absolute inset-0 z-10 h-full w-full cursor-pointer opacity-0"
          />
          <div id="upload-placeholder" class="space-y-2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              class="mx-auto h-12 w-12 text-gray-400"
            >
              <path
                fill="currentColor"
                d="M9 16v-6H5l7-7l7 7h-4v6zm-4 4v-2h14v2z"></path>
            </svg>
            <p class="text-gray-600">Arrastra y suelta archivos aquí o</p>
            <p class="text-primary-500">Haz clic para seleccionar archivos</p>
          </div>

          <div id="selected-files" class="mt-4 grid hidden grid-cols-2 gap-4">
          </div>

          <div id="upload-results" class="mt-4 hidden">
            <div
              class="mb-4 rounded border border-green-400 bg-green-100 px-4 py-3"
            >
              <p id="success-count" class="text-sm"></p>
            </div>
            <div id="result-files" class="grid grid-cols-2 gap-4"></div>
          </div>
        </div>

        <div class="pt-6">
          <button
            id="upload-button"
            type="submit"
            class="bg-action-500 w-full cursor-pointer rounded-2xl p-5 font-bold hover:bg-amber-300"
            >Subir</button
          >
        </div>

        <div id="reset-container" class="hidden text-center">
          <button
            id="reset-button"
            type="button"
            class="text-primary-500 hover:text-primary-700 cursor-pointer underline"
          >
            Subir nuevos archivos
          </button>
        </div>
      </form>
    </div>
  </section>

  <script>
    const apiUrl = import.meta.env.PUBLIC_API_URL;
    const dropZone = document.getElementById("drop-zone");
    const fileInput = document.getElementById("file-input");
    const uploadPlaceholder = document.getElementById("upload-placeholder");
    const selectedFiles = document.getElementById("selected-files");
    const uploadResults = document.getElementById("upload-results");
    const resultFiles = document.getElementById("result-files");
    const successCount = document.getElementById("success-count");
    const resetContainer = document.getElementById("reset-container");
    const resetButton = document.getElementById("reset-button");
    const uploadButton = document.getElementById("upload-button");

    // Formatea el tamaño del archivo a una forma legible
    function formatFileSize(bytes) {
      if (bytes < 1024) return bytes + " bytes";
      else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + " KB";
      else return (bytes / 1048576).toFixed(1) + " MB";
    }

    // Crear miniatura para un archivo
    function createThumbnail(file) {
      return new Promise((resolve) => {
        if (file.type.startsWith("image/")) {
          const reader = new FileReader();
          reader.onload = (e) => {
            resolve(e.target.result);
          };
          reader.readAsDataURL(file);
        } else if (file.type.startsWith("video/")) {
          resolve("/media/video-thumbnail.jpg"); // Imagen placeholder para videos
        } else {
          resolve("/file-thumbnail.png"); // Imagen placeholder para otros archivos
        }
      });
    }

    // Mostrar archivos seleccionados antes de subir
    fileInput.addEventListener("change", async (e) => {
      const files = Array.from(e.target.files);
      if (files.length === 0) return;

      uploadPlaceholder.classList.add("hidden");
      selectedFiles.classList.remove("hidden");
      selectedFiles.innerHTML = "";

      for (const file of files) {
        const thumbnail = await createThumbnail(file);

        const fileCard = document.createElement("div");
        fileCard.className = "bg-gray-50 p-3 rounded-lg shadow-sm relative";

        fileCard.innerHTML = `
          <div class="relative aspect-square mb-2 bg-gray-200 rounded overflow-hidden">
            <img src="${thumbnail}" alt="${file.name}" class="w-full h-full object-cover">
          </div>
          <div class="text-xs truncate font-medium">${file.name}</div>
          <div class="text-xs text-gray-500">${formatFileSize(file.size)}</div>

        `;
        // <button type="button" class="remove-file absolute top-1 right-1 bg-white rounded-full p-1 shadow hover:bg-red-100">
        //     <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-red-500" viewBox="0 0 20 20" fill="currentColor">
        //       <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
        //     </svg>
        //   </button>

        selectedFiles.appendChild(fileCard);

        // Eliminar archivo individual
        fileCard.querySelector(".remove-file").addEventListener("click", () => {
          // Crear un nuevo FileList sin el archivo eliminado
          const dt = new DataTransfer();
          const currentFiles = Array.from(fileInput.files);
          currentFiles.forEach((currentFile) => {
            if (currentFile !== file) dt.items.add(currentFile);
          });
          fileInput.files = dt.files;

          // Actualizar interfaz
          fileCard.remove();
          if (fileInput.files.length === 0) {
            uploadPlaceholder.classList.remove("hidden");
            selectedFiles.classList.add("hidden");
          }
        });
      }
    });

    // Prevenir comportamiento predeterminado para drag & drop
    ["dragenter", "dragover", "dragleave", "drop"].forEach((eventName) => {
      dropZone.addEventListener(
        eventName,
        (e) => {
          e.preventDefault();
          e.stopPropagation();
        },
        false,
      );
    });

    // Añadir clases visuales durante drag
    ["dragenter", "dragover"].forEach((eventName) => {
      dropZone.addEventListener(
        eventName,
        () => {
          dropZone.classList.add("border-primary-500", "bg-primary-50");
        },
        false,
      );
    });

    ["dragleave", "drop"].forEach((eventName) => {
      dropZone.addEventListener(
        eventName,
        () => {
          dropZone.classList.remove("border-primary-500", "bg-primary-50");
        },
        false,
      );
    });

    // Manejar archivos soltados
    dropZone.addEventListener("drop", (e) => {
      fileInput.files = e.dataTransfer.files;
      const event = new Event("change");
      fileInput.dispatchEvent(event);
    });

    // Manejar envío de formulario
    document
      .getElementById("upload-form")
      .addEventListener("submit", async (e) => {
        e.preventDefault();
        const token = localStorage.getItem("token");
        if (!token) {
          alert("Debes iniciar sesión");
          return (window.location.href = "/login");
        }

        // Mostrar estado de carga
        uploadButton.disabled = true;
        uploadButton.innerHTML = `
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Subiendo...
      `;

        const files = Array.from(fileInput.files);
        const results = [];

        try {
          for (const file of files) {
            const formData = new FormData();
            formData.append("file", file);

            const res = await fetch(`${apiUrl}/upload`, {
              method: "POST",
              headers: { Authorization: `Bearer ${token}` },
              body: formData,
            });

            if (res.ok) {
              const { url } = await res.json();
              results.push({ name: file.name, url, success: true, file });
            } else {
              const err = await res.json();
              results.push({
                name: file.name,
                error: err.error,
                success: false,
                file,
              });
            }
          }

          // Mostrar resultados
          uploadPlaceholder.classList.add("hidden");
          selectedFiles.classList.add("hidden");
          uploadResults.classList.remove("hidden");
          resetContainer.classList.remove("hidden");

          // Contar archivos subidos correctamente
          const successfulUploads = results.filter((r) => r.success).length;
          successCount.textContent = `${successfulUploads} de ${files.length} archivos subidos correctamente.`;

          // Mostrar archivos con sus enlaces
          resultFiles.innerHTML = "";
          for (const result of results) {
            const fileCard = document.createElement("div");
            fileCard.className = result.success
              ? "bg-green-50 p-3 rounded-lg shadow-sm border border-green-200"
              : "bg-red-50 p-3 rounded-lg shadow-sm border border-red-200";

            const thumbnail = await createThumbnail(result.file);

            fileCard.innerHTML = `
            <div class="relative aspect-square mb-2 bg-gray-200 rounded overflow-hidden">
              <img src="${thumbnail}" alt="${result.name}" class="w-full h-full object-cover">
              ${
                result.success
                  ? '<span class="absolute top-1 right-1 bg-green-500 rounded-full p-1"><svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" /></svg></span>'
                  : '<span class="absolute top-1 right-1 bg-red-500 rounded-full p-1"><svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" /></svg></span>'
              }
            </div>
            <div class="text-xs truncate font-medium">${result.name}</div>
            ${
              result.success
                ? `<a href="${result.url}" target="_blank" class="text-xs text-primary-600 hover:text-primary-800 underline block mt-1">Ver archivo</a>`
                : `<p class="text-xs text-red-600 mt-1">Error: ${result.error}</p>`
            }
          `;

            resultFiles.appendChild(fileCard);
          }
        } catch (error) {
          console.error("Error al subir:", error);
          alert("Ocurrió un error al subir los archivos");
        } finally {
          // Restaurar botón
          uploadButton.disabled = false;
          uploadButton.innerHTML = `
          <span class="mdi mdi-cloud-upload mr-2"></span>
          Subir
        `;
        }
      });

    // Botón para reiniciar y subir nuevos archivos
    resetButton.addEventListener("click", () => {
      fileInput.value = "";
      uploadResults.classList.add("hidden");
      resetContainer.classList.add("hidden");
      uploadPlaceholder.classList.remove("hidden");
      resultFiles.innerHTML = "";
    });
  </script>
</MainLayout>
