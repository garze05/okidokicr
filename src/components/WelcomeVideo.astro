---
const { pathMp4, pathWebM=pathMp4 } = Astro.props;
---

<div id="welcome-video-container" class="fixed inset-0 z-50 flex items-center justify-center overflow-hidden opacity-0 pointer-events-none">
  <video 
    id="welcome-video"
    class="absolute inset-0 min-w-full min-h-full w-auto h-auto object-contain z-10"
    autoplay
    muted
    playsinline
    preload="auto"
  >
    <source src={pathMp4} type="video/mp4">
    <source src={pathWebM} type="video/webm">
    Your browser does not support the video tag.
  </video>

  <div class="absolute inset-0 bg-black/40 z-20"></div>
  
  <div class="relative z-30 text-center text-white px-4">
    <h1 class="text-4xl md:text-6xl font-bold mb-4">30 aniversario OkiDoki</h1>
    <p class="text-xl md:text-2xl mb-8">Muchas promociones para tu evento especial</p>
    <button id="enter-site-btn" class="bg-primary-500 hover:bg-primary-600 text-white font-bold py-3 px-8 rounded-lg transition duration-300">
      Entrar al sitio
    </button>
  </div>
  
  <button id="skip-video-btn" class="absolute top-4 right-4 text-white opacity-70 hover:opacity-100 p-2 z-30">
    Saltar <span class="ml-2">â†’</span>
  </button>

  <!-- Add unmute overlay -->
  <div id="unmute-overlay" class="absolute inset-0 z-20 flex items-end justify-center cursor-pointer">
    <div class="bg-black/40 absolute inset-0"></div>
    <button 
      id="unmute-btn"
      class="relative z-30 flex items-center gap-2 px-4 py-2 bg-white/10 rounded-lg text-white hover:bg-white/20 transition-colors"
      aria-label="Unmute video"
    >
      <svg class="w-6 h-6" viewBox="0 0 24 24" fill="currentColor">
        <path d="M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z"/>
      </svg>
      Activar sonido
    </button>
  </div>

  <div id="video-progress" class="absolute bottom-0 left-0 h-1 bg-primary-500 w-0 z-30"></div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const container = document.getElementById('welcome-video-container');
  const video = document.getElementById('welcome-video');
  const skipBtn = document.getElementById('skip-video-btn');
  const enterBtn = document.getElementById('enter-site-btn');
  const progressBar = document.getElementById('video-progress');

  // Check if we're in a new browser session
  const currentSession = sessionStorage.getItem('browserSession');
  const hasSeenVideo = localStorage.getItem('hasSeenWelcomeVideo');
  
  const unmuteOverlay = document.getElementById('unmute-overlay');
  const unmuteBtn = document.getElementById('unmute-btn');

  // Add unmute functionality
  const handleUnmute = () => {
    video.muted = false;
    unmuteOverlay.classList.add('opacity-0');
    setTimeout(() => {
      unmuteOverlay.style.display = 'none';
    }, 300);
  };

  unmuteBtn.addEventListener('click', handleUnmute);
  video.addEventListener('click', handleUnmute);

  if (!currentSession) {
    // New session - reset video state
    sessionStorage.setItem('browserSession', Date.now().toString());
    localStorage.removeItem('hasSeenWelcomeVideo');
  } else if (hasSeenVideo) {
    // Same session, already seen video
    return;
  }

  // Show and enable video container
  requestAnimationFrame(() => {
    container.classList.remove('opacity-0', 'pointer-events-none');
    container.classList.add('transition-opacity', 'duration-500', 'opacity-100');
    document.body.classList.add('has-welcome-video');
  });

  // Hide video function
  const hideVideo = () => {
    video.muted = true; // Reset muted state
    container.classList.remove('opacity-100');
    container.classList.add('opacity-0');
    document.body.classList.remove('has-welcome-video');
    
    setTimeout(() => {
      container.classList.add('pointer-events-none');
      localStorage.setItem('hasSeenWelcomeVideo', 'true');
    }, 500);
  };

  // Initialize video
  try {
    const playPromise = video.play();
    if (playPromise !== undefined) {
      playPromise.catch(err => {
        console.error('Error playing video:', err);
        enterBtn.innerText = "Reproducir y entrar";
        enterBtn.addEventListener('click', () => video.play(), { once: true });
      });
    }
  } catch (e) {
    console.error('Exception trying to play video:', e);
  }

  // Update progress bar
  video.addEventListener('timeupdate', () => {
    if (video.duration) {
      const progress = (video.currentTime / video.duration) * 100;
      progressBar.style.width = `${progress}%`;
      
      if (progress > 90) {
        enterBtn.classList.add('animate-pulse');
      }
    }
  });

  // Event listeners
  video.addEventListener('ended', hideVideo);
  skipBtn.addEventListener('click', hideVideo);
  enterBtn.addEventListener('click', hideVideo);
});
</script>

<style>
:global(body.has-welcome-video) {
  overflow: hidden;
}

#welcome-video-container {
  background-color: #000;
  transition: opacity 0.5s ease;
}

#welcome-video {
  display: block;
  opacity: 1;
  visibility: visible;
  object-fit: contain;
  object-position: center;
  width: 100%;
  height: 100%;
  max-height: 100vh;
}

#unmute-overlay {
  transition: opacity 0.3s ease;
}

@media (max-width: 768px) {
  #welcome-video {
    object-fit: contain;
  }
}
</style>